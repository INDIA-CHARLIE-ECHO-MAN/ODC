download_network_hdf5 <- function(network_type = "generic", flag_occr = TRUE, dir = "") {
net_files_keys <- c("b0v6405hz5zlmv8",  "qkoenzheon8nafj",  "299y0pnwewv9ee6", "2np3e78gjnvoe10",  "wsqrji519uyh03k", "tayd6axapwt29ck")
gene_files_keys <- c("8fo67lvq6jemjs4", "bs232ltz50yez7o",  "mi25kj1dtxubzw7",  "s4865kljzg5p8pv", "waqkeem6agg05ve", "fyuq0xkhq4s0ars")
med_files_keys <- c("ucc8uj6p6gc14hu", "gr9ghxp17pe1gaf", "1qwcvvdjr92o22o", "xkioxsl7989ems6", "uykxeie4qgz6dns", "2xoutlukp4cv29x")
i <- 0
if (network_type == "generic" ) { i <-  1 }
if (network_type == "blood" ) { i <- 3 }
if (network_type == "brain" ) { i <- 5 }
if (flag_occr == FALSE) { i <- i + 1 }
if (flag_occr == TRUE ) { network_type <- paste0(network_type, ".occr") }
genes_hdf5  <- paste0(network_type, ".genes.h5")
median_hdf5 <- paste0(network_type, ".med.h5")
net_hdf5    <- paste0(network_type, ".net.h5")
url <- "https://www.dropbox.com/s/"
if( i >  0 ) {
genes_hdf5_dl  <- paste0(url, gene_files_keys[i], "/", genes_hdf5, "?raw=1")
median_hdf5_dl <- paste0(url, med_files_keys[i], "/", median_hdf5, "?raw=1")
net_hdf5_dl    <- paste0(url, net_files_keys[i], "/", net_hdf5, "?raw=1")
if(!file.exists(genes_hdf5)){
tryCatch( download.file(genes_hdf5_dl,   destfile=genes_hdf5) )
}
if(!file.exists(median_hdf5)){
tryCatch( download.file(median_hdf5_dl,   destfile=median_hdf5) )
}
if(!file.exists(net_hdf5)){
tryCatch( download.file(net_hdf5_dl,   destfile=net_hdf5) )
}
}
}
download_network_hdf5(network_type="generic")
download_network_hdf5(network_type="blood")
download_network_hdf5 <- function(network_type = "generic", flag_occr = TRUE, dir = "") {
net_files_keys <- c("b0v6405hz5zlmv8",  "qkoenzheon8nafj",  "299y0pnwewv9ee6", "2np3e78gjnvoe10",  "wsqrji519uyh03k", "tayd6axapwt29ck")
gene_files_keys <- c("8fo67lvq6jemjs4", "bs232ltz50yez7o",  "mi25kj1dtxubzw7",  "s4865kljzg5p8pv", "waqkeem6agg05ve", "fyuq0xkhq4s0ars")
med_files_keys <- c("ucc8uj6p6gc14hu", "gr9ghxp17pe1gaf", "1qwcvvdjr92o22o", "xkioxsl7989ems6", "uykxeie4qgz6dns", "2xoutlukp4cv29x")
i <- 0
if (network_type == "generic" ) { i <-  1 }
if (network_type == "blood" ) { i <- 3 }
if (network_type == "brain" ) { i <- 5 }
if (flag_occr == FALSE) { i <- i + 1 }
if (flag_occr == TRUE ) { network_type <- paste0(network_type, ".occr") }
genes_hdf5  <- paste0(network_type, ".genes.h5")
median_hdf5 <- paste0(network_type, ".med.h5")
net_hdf5    <- paste0(network_type, ".net.h5")
url <- "https://www.dropbox.com/s/"
if( i >  0 ) {
genes_hdf5_dl  <- paste0(url, gene_files_keys[i], "/", genes_hdf5, "?raw=1")
median_hdf5_dl <- paste0(url, med_files_keys[i], "/", median_hdf5, "?raw=1")
net_hdf5_dl    <- paste0(url, net_files_keys[i], "/", net_hdf5, "?raw=1")
if(!file.exists(genes_hdf5)){
tryCatch( download.file(genes_hdf5_dl,   destfile=genes_hdf5) )
}
if(!file.exists(median_hdf5)){
tryCatch( download.file(median_hdf5_dl,   destfile=median_hdf5) )
}
if(!file.exists(net_hdf5)){
tryCatch( download.file(net_hdf5_dl,   destfile=net_hdf5) )
}
}
}
download_network_hdf5(network_type="generic")
download_network_hdf5(network_type="blood")
download_network_hdf5(network_type="brain")
library(OutDeCo)
man gene_set_enrichment()
man gene_set_enrichment
data(go_slim_entrez)
data(go_voc)
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$up$clusters$genes[clust_net$up$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
groups <- as.numeric(labels$Sex)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19, bty="n",
ylab="log2 FC", xlab="Average expression (log2 CPM + 1)")
deg <- calc_DE(counts_data, groups, "DESeq2")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19,  bty="n",
xlab="Average expression (log2 CPM + 1)", ylab="log2 FC" )
deg <- calc_DE(counts_data, groups, "edgeR")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19 , bty="n",
xlab="Average expression (log2 CPM + 1)", ylab="log2 FC")
data(go_slim_entrez)
data(go_voc)
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$up$clusters$genes[clust_net$up$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$down$clusters$genes[clust_net$down$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
filt_min <- 6
clust_size <- plyr::count(clust_net$down$clusters$labels )
clust_keep <-  clust_size[clust_size[,2] < filt_min ,1]
genes_keep <- !is.na(match( clust_net$down$clusters$labels, clust_keep))
plot_coexpression_heatmap(  sub_net$down, clust_net$down, filt=TRUE)
plot_network(1-sub_net$down, clust_net$down , 1 - medK)
# Extract data from the DE analysis
data(sub_nets) # so you do not need to run the DE analysis again
deg_sig <- sub_nets$deg_sig
fc_sig  <- sub_nets$fc_sig
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
# Or if the analysis was from a gene list:
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
data(go_slim_entrez)
data(go_voc)
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$up$clusters$genes[clust_net$up$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$down$clusters$genes[clust_net$down$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = FALSE )
# Extract data from the DE analysis
clust_net[["genes"]]  <- cluster_coexp( sub_net, medK = medK, flag_plot = FALSE )
# Extract data from the DE analysis
data(sub_nets) # so you do not need to run the DE analysis again
deg_sig <- sub_nets$deg_sig
fc_sig  <- sub_nets$fc_sig
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
# Or if the analysis was from a gene list:
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK)
plot_coexpression_heatmap( sub_net$down, clust_net$down)
plot_network(sub_net$down, clust_net$down , medK)
plot_scatter(node_degrees$up[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
plot_scatter(node_degrees$up[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree", flag= "density")
filt_min <- 6
clust_size <- plyr::count(clust_net$down$clusters$labels )
clust_keep <-  clust_size[clust_size[,2] < filt_min ,1]
genes_keep <- !is.na(match( clust_net$down$clusters$labels, clust_keep))
plot_coexpression_heatmap(  sub_net$down, clust_net$down, filt=TRUE)
plot_network(1-sub_net$down, clust_net$down , 1 - medK)
data(go_slim_entrez)
data(go_voc)
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$up$clusters$genes[clust_net$up$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$down$clusters$genes[clust_net$down$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
OutDeCo_lite/vignette.md at master Â· ballouzlab/OutDeCo_lite
data(sub_nets) # so you do not need to run the DE analysis again
deg_sig <- sub_nets$deg_sig
fc_sig  <- sub_nets$fc_sig
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = FALSE )
# Extract data from the DE analysis
clust_net[["genes"]]  <- cluster_coexp( sub_net, medK = medK, flag_plot = FALSE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = TRUE )
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK)
plot_coexpression_heatmap( sub_net$down, clust_net$down)
plot_network(sub_net$down, clust_net$down , medK)
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK)
plot_coexpression_heatmap( sub_net$down, clust_net$down)
plot_network(sub_net$down, clust_net$down , medK)
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = FALSE )
# Extract data from the DE analysis
clust_net[["genes"]]  <- cluster_coexp( sub_net, medK = medK, flag_plot = FALSE )
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = TRUE )
# Extract data from the DE analysis
clust_net[["genes"]]  <- cluster_coexp( sub_net, medK = medK, flag_plot = True )
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir="./")
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir=".\")
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir="./")
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir="./")
deg_output <- calc_DE(counts_data, groups, "wilcox")
network_type <- 'generic'
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir="./")
./
quit
print "./"
library(OutDeCo)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="./")
library(rhdf5)
\
library(rhdf5)
\
library(rhdf5)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="./")
library(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
R -e "shiny::runApp('~/ui.R')"
R -e "shiny::runApp('~/ui')"
R -e "shiny::runApp(ui)"
R -e "shiny::runApp(server)"
R -e "shiny::runApp('~/server')"
R -e "shiny::runApp('~/ui')"
runApp('ODC')
library(shiny)
runApp('ODC')
runApp('ODC')
download_network_hdf5 <- function(network_type = "generic", flag_occr = TRUE, dir = "") {
net_files_keys <- c("b0v6405hz5zlmv8",  "qkoenzheon8nafj",  "299y0pnwewv9ee6", "2np3e78gjnvoe10",  "wsqrji519uyh03k", "tayd6axapwt29ck")
gene_files_keys <- c("8fo67lvq6jemjs4", "bs232ltz50yez7o",  "mi25kj1dtxubzw7",  "s4865kljzg5p8pv", "waqkeem6agg05ve", "fyuq0xkhq4s0ars")
med_files_keys <- c("ucc8uj6p6gc14hu", "gr9ghxp17pe1gaf", "1qwcvvdjr92o22o", "xkioxsl7989ems6", "uykxeie4qgz6dns", "2xoutlukp4cv29x")
i <- 0
if (network_type == "generic" ) { i <-  1 }
if (network_type == "blood" ) { i <- 3 }
if (network_type == "brain" ) { i <- 5 }
if (flag_occr == FALSE) { i <- i + 1 }
if (flag_occr == TRUE ) { network_type <- paste0(network_type, ".occr") }
genes_hdf5  <- paste0(network_type, ".genes.h5")
median_hdf5 <- paste0(network_type, ".med.h5")
net_hdf5    <- paste0(network_type, ".net.h5")
url <- "https://www.dropbox.com/s/"
if( i >  0 ) {
genes_hdf5_dl  <- paste0(url, gene_files_keys[i], "/", genes_hdf5, "?raw=1")
median_hdf5_dl <- paste0(url, med_files_keys[i], "/", median_hdf5, "?raw=1")
net_hdf5_dl    <- paste0(url, net_files_keys[i], "/", net_hdf5, "?raw=1")
if(!file.exists(genes_hdf5)){
tryCatch( download.file(genes_hdf5_dl,   destfile=genes_hdf5, mode = "wb") )
}
if(!file.exists(median_hdf5)){
tryCatch( download.file(median_hdf5_dl,   destfile=median_hdf5, mode = "wb") )
}
if(!file.exists(net_hdf5)){
tryCatch( download.file(net_hdf5_dl,   destfile=net_hdf5, mode = "wb") )
}
}
}
library(OutDeCo)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="./")
remove.packages("OutDeCo")
devtools::install_github("ballouzlab/OutDeCo_lite")
library(shiny)
library(OutDeCo)
setwd("C:/Users/yvonn/OneDrive - UNSW/Documents/1 Study/2 University/UNSW/Courses/DESN2000/Git/ODC")
runApp90
runApp()
runApp()
