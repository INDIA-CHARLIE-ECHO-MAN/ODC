runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
?sidebarPanel
runApp('ODC')
?navbarMenu
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
?eventReactive
runApp('C:/Users/jasyi/COMP/reactive.R')
?updateRadioButtons
runApp('ODC')
runApp('ODC')
runApp()
runApp()
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
shiny::runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
?navlistPanel
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/Downloads/dropdown.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
View(responses)
shiny::runApp('ODC')
runApp('ODC')
?plotOutput
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?dropdown
runApp('ODC')
runApp('ODC')
runApp('ODC')
?animateOptions
runApp('ODC')
library(shiny); runApp('plot.R')
runApp('plot.R')
?renderPlot
git status
runApp('plot.R')
?plot_click
?renderText
runApp('plot.R')
?plotOutput
runApp('plot.R')
runApp('plot2.R')
runApp('plot.R')
library(shiny); runApp('plot2.R')
runApp('ODC')
runApp('pickerInput.R')
runApp('ODC')
?sample
runApp('ODC')
?EGAD
shiny::runApp('ODC')
data(counts_data)
data(labels)
library(OutDeCo)
data(counts_data)
data(labels)
network_type <- 'generic'
# data(sub_nets) # so you do not need to run the DE analysis again
deg_sig <- sub_nets$deg_sig
fc_sig  <- sub_nets$fc_sig
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK)
plot_coexpression_heatmap( sub_net$down, clust_net$down)
plot_network(sub_net$down, clust_net$down , medK)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=GLOBAL_DIR)
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chr3"], 25 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=GLOBAL_DIR)
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chr3"], 25 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=GLOBAL_DIR)
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=./)
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = TRUE)
plot_scatter(node_degrees$up[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
plot_scatter(node_degrees$down[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
plot_scatter(node_degrees$down[,1]/node_degrees$n_genes_total,
node_degrees$down[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
plot_scatter(node_degrees$genes[,1]/node_degrees$n_genes_total,
node_degrees$genses[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
plot_scatter(node_degrees$genes[,1]/node_degrees$n_genes_total,
node_degrees$genes[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
shiny::runApp('ODC')
View(counts_data)
View(counts_data)
rm(counts_data)
rm(node_degrees)
rm(sub_net)
runApp('ODC')
runApp('ODC')
library(OutDeCo)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=GLOBAL_DIR)
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="../networks")
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
plot_scatter(node_degrees$up[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
rm(node_degrees)
rm(sub_net)
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="../networks")
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = TRUE)
runApp('ODC')
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=networks/)
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
View(node_degrees)
plot_scatter(node_degrees$genes[,1]/node_degrees$n_genes_total,
plot_scatter(node_degrees$up[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
plot_scatter(node_degrees$up[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree", flag= "density")
rm(node_degrees)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=networks/)
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
runApp('ODC')
?conditionalPanel
runApp('ODC')
?conditionalPanel
?conditionalPanel
runApp(shinyApp(
ui = fluidPage(
checkboxGroupInput("test", "Test", letters[1:10]),
conditionalPanel("$.inArray('e', input.test) > -1", "e is selected")
),
server = function(input, output) {
}
))
runApp(shinyApp(
ui = fluidPage(
checkboxGroupInput("test", "Test", letters[1:10]),
conditionalPanel("$.inArray('e', input.test) > -1", "e is selected")
conditionalPanel("$.inArray('f', input.test) > -1", "e is selected")
),
server = function(input, output) {
}
))
runApp(shinyApp(
ui = fluidPage(
checkboxGroupInput("test", "Test", letters[1:10]),
conditionalPanel("$.inArray('e', input.test) > -1", "e is selected")
conditionalPanel("$.inArray('f', input.test) > -1", "f is selected")
),
server = function(input, output) {
}
))
source('prototypes/conditionalpanel.R')
source('prototypes/conditionalpanel.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
?navlistPanel
shiny::runApp('ODC')
runApp()
runApp('ODC')
library(OutDeCo)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=ODC/networks/)
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="ODC/networks/")
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="networks/")
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
shiny::runApp('ODC')
runApp('ODC')
?insertUI
runApp('ODC')
runApp('ODC')
runApp('ODC')
?paste0
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?ns
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?hide
runApp('ODC')
runApp()
runApp('ODC')
?renderText
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
?sidebarPanel
runApp('ODC')
?dropdown
runApp('ODC')
?tooltipOptions
runApp('ODC')
library(shiny); runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('ODC')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('shinytemplate.R')
runApp('shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('shinytemplate.R')
runApp('shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
?navbarPage
?actionButton
shiny::runApp('ODC')
data(labels)
library(OutDeCo)
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
groups <- as.numeric(labels$Sex)
groups <- as.numeric(labels$status)
groups <- as.numeric(labels$sex)
groups[labels$family==1] <- 0
groups[labels$relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
groups <- as.numeric(labels$Status)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
?actionButton
runApp('ODC')
runApp('ODC')
View(counts_data)
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
library(OutDeCo)
data(labels)
data(counts_data)
force(counts_data)
View(counts_data)
force(labels)
groups <- as.numeric(labels$Sex)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
View(counts_data)
rm(counts_data)
deg <- calc_DE(counts_data, groups, "wilcox")
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19, bty="n",
ylab="log2 FC", xlab="Average expression (log2 CPM + 1)")
runApp('ODC')
runApp('ODC')
print(counts_data$family)
print(labels$Family)
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
print(labels)
runApp('ODC')
print(labels)
runApp('ODC')
print(labels$Sex)
runApp('ODC')
runApp('ODC')
runApp('ODC')
print(labels$Status)
runApp('ODC')
runApp('ODC')
View(labels)
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
library(shiny); runApp('prototypes/spinner.R')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/DESN2000/prototypes/spinner.R')
runApp('C:/Users/jasyi/COMP/DESN2000/prototypes/spinner.R')
runApp('prototypes/spinner.R')
runApp('prototypes/spinner.R')
runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
shiny::runApp('ODC')
library(affy)
shiny::runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
library(shiny); runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
groups <- rep(1, length(labels$Sex))
groups[labels$Sex == "m"] = 2
print(groups)
shiny::runApp('ODC')
runApp()
runApp()
runApp()
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
names(labels)
levels(labels$Status)
levels(labels$Relationship)
runApp('ODC')
runApp('ODC')
levels(labels$Sex)
runApp('ODC')
runApp('ODC')
levels(labels$Relationship)
runApp('ODC')
runApp('ODC')
?updateSelectInput
runApp('ODC')
runApp('ODC')
names(labels)
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
print(labels$Sex)
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
