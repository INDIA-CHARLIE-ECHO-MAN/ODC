selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
server <- function(input, output, session) {
selectedData2 <- reactive({
iris[, c(input$xcol2, input$ycol2)]
})
clusters2 <- reactive({
kmeans(selectedData2(), input$clusters2)
})
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
}
ui <- fluidPage(
tags$h2("pickerInput in dropdown"),
br(),
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol2',
label = 'X Variable',
choices = names(iris),
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol2',
label = 'Y Variable',
choices = names(iris),
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
server <- function(input, output, session) {
selectedData2 <- reactive({
iris[, c(input$xcol2, input$ycol2)]
})
clusters2 <- reactive({
kmeans(selectedData2(), input$clusters2)
})
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
}
runApp('C:/Users/jasyi/Downloads/file.R')
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
server <- function(input, output, session) {
selectedData2 <- reactive({
iris[, c(input$xcol2, input$ycol2)]
})
clusters2 <- reactive({
kmeans(selectedData2(), input$clusters2)
})
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
}
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
ui <- fluidPage(
tags$h2("pickerInput in dropdown"),
br(),
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol2',
label = 'X Variable',
choices = names(iris),
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol2',
label = 'Y Variable',
choices = names(iris),
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
ui <- fluidPage(
tags$h2("pickerInput in dropdown"),
br(),
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol2',
label = 'X Variable',
choices = names(iris),
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol2',
label = 'Y Variable',
choices = names(iris),
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
library(shiny); runApp('C:/Users/jasyi/Downloads/dropdown.R')
# A demonstration of clicking, hovering, and brushing
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
plotOutput("plot", height=300,
click = "plot_click",  # Equiv, to click=clickOpts(id="plot_click")
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")
),
h4("Clicked points"),
tableOutput("plot_clickedpoints"),
h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
# A basic shiny app with a plotOutput
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("newplot", "New plot")
),
mainPanel(
plotOutput("plot")
)
)
),
server = function(input, output) {
output$plot <- renderPlot({
input$newplot
# Add a little noise to the cars data
cars2 <- cars + rnorm(nrow(cars))
plot(cars2)
})
}
)
library(shiny); runApp('plot.R')
runApp('sidebar.R')
ui <- fluidPage(
tags$h2("pickerInput in dropdown"),
br(),
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol2',
label = 'X Variable',
choices = names(iris),
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol2',
label = 'Y Variable',
choices = names(iris),
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
runApp('C:/Users/jasyi/Downloads/dropdown.R')
?sliderInput
library(shiny); runApp('shinytemplate.R')
runApp('Tutorial.R')
runApp('sidebar.R')
runApp('ODC')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("obs", "Number of observations:", min = 10, max = 500, value = 100)
),
mainPanel(plotOutput("distPlot"))
)
)
runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/Downloads/dropdown.R')
runApp('ODC')
runApp()
runApp()
runApp('ODC')
?br
runApp('ODC')
?dropdown
runApp('ODC')
runApp('ODC')
library(shiny); runApp('plot.R')
runApp('plot.R')
?plot
runApp('plot.R')
library(OutDeCo)
data(counts_data)
data(labels)
# Or if the analysis was from a gene list:
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
runApp('plot.R')
runApp('plot.R')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('plot.R')
?plotOutput
runApp('ODC')
runApp('ODC')
runApp('ODC')
?themeSelector
runApp('design.R')
runApp('design.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?materialSwitch
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?navBarPage
?navbarPage
runApp('ODC')
shinyApp(
shinyUI(
navbarPage("This is some awesome testing!!!",
tabPanel("Plot"),
tabPanel("Summary" ),
navbarMenu("More",
tabPanel("Table"),
tabPanel("About")
),
tags$head(tags$style('
nav .container:first-child {
margin-left:10px; width: 100%;
}'))
)),
shinyServer(function(input, output) {})
shinyApp(
shinyUI(
navbarPage("This is some awesome testing!!!",
tabPanel("Plot"),
tabPanel("Summary" ),
navbarMenu("More",
tabPanel("Table"),
tabPanel("About")
),
tags$head(tags$style('
nav .container:first-child {
margin-left:10px; width: 100%;
}'))
)),
shinyServer(function(input, output) {})
shinyApp(
shinyUI(
navbarPage("This is some awesome testing!!!",
tabPanel("Plot"),
tabPanel("Summary" ),
navbarMenu("More",
tabPanel("Table"),
tabPanel("About")
),
tags$head(tags$style('
nav .container:first-child {
margin-left:10px; width: 100%;
}'))
)),
shinyServer(function(input, output) {})
shinyApp(
shinyUI(
navbarPage("This is some awesome testing!!!",
tabPanel("Plot"),
tabPanel("Summary" ),
navbarMenu("More",
tabPanel("Table"),
tabPanel("About")
),
tags$head(tags$style('
nav .container:first-child {
margin-left:10px; width: 100%;
}'))
)),
shinyServer(function(input, output) {})
runApp('shinytemplate.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
library(shiny); runApp('dataStorage.R')
runApp('dataStorage.R')
?textInput
?actionButton
?reactive
?sapply
?wellbar
?wellPanel
?absolutePanel
shiny::runApp('ODC')
shiny::runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
?sidebarPanel
runApp('ODC')
?navbarMenu
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
?eventReactive
runApp('C:/Users/jasyi/COMP/reactive.R')
?updateRadioButtons
runApp('ODC')
runApp('ODC')
runApp()
runApp()
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
shiny::runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
?navlistPanel
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/Downloads/dropdown.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
View(responses)
shiny::runApp('ODC')
runApp('ODC')
?plotOutput
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?dropdown
runApp('ODC')
runApp('ODC')
runApp('ODC')
?animateOptions
runApp('ODC')
library(shiny); runApp('plot.R')
runApp('plot.R')
?renderPlot
git status
runApp('plot.R')
?plot_click
?renderText
runApp('plot.R')
?plotOutput
runApp('plot.R')
runApp('plot2.R')
runApp('plot.R')
library(shiny); runApp('plot2.R')
runApp('ODC')
runApp('pickerInput.R')
runApp('ODC')
?sample
runApp('ODC')
?EGAD
shiny::runApp('ODC')
runApp('ODC')
