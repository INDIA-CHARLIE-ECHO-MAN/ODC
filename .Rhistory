))
source('prototypes/conditionalpanel.R')
source('prototypes/conditionalpanel.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
?navlistPanel
shiny::runApp('ODC')
runApp()
runApp('ODC')
library(OutDeCo)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir=ODC/networks/)
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="ODC/networks/")
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="networks/")
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net = list()
clust_net[["genes"]]  <- cluster_coexp( sub_net$genes, medK = medK, flag_plot = FALSE )
shiny::runApp('ODC')
runApp('ODC')
?insertUI
runApp('ODC')
runApp('ODC')
runApp('ODC')
?paste0
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?ns
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?hide
runApp('ODC')
runApp()
runApp('ODC')
?renderText
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
?sidebarPanel
runApp('ODC')
?dropdown
runApp('ODC')
?tooltipOptions
runApp('ODC')
library(shiny); runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('ODC')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('shinytemplate.R')
runApp('shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('shinytemplate.R')
runApp('shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('prototypes/shinytemplate.R')
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
?navbarPage
?actionButton
shiny::runApp('ODC')
data(labels)
library(OutDeCo)
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
groups <- as.numeric(labels$Sex)
groups <- as.numeric(labels$status)
groups <- as.numeric(labels$sex)
groups[labels$family==1] <- 0
groups[labels$relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
groups <- as.numeric(labels$Status)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
?actionButton
runApp('ODC')
runApp('ODC')
View(counts_data)
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
library(OutDeCo)
data(labels)
data(counts_data)
force(counts_data)
View(counts_data)
force(labels)
groups <- as.numeric(labels$Sex)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
View(counts_data)
rm(counts_data)
deg <- calc_DE(counts_data, groups, "wilcox")
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19, bty="n",
ylab="log2 FC", xlab="Average expression (log2 CPM + 1)")
runApp('ODC')
runApp('ODC')
print(counts_data$family)
print(labels$Family)
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
print(labels)
runApp('ODC')
print(labels)
runApp('ODC')
print(labels$Sex)
runApp('ODC')
runApp('ODC')
runApp('ODC')
print(labels$Status)
runApp('ODC')
runApp('ODC')
View(labels)
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
library(shiny); runApp('prototypes/spinner.R')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/DESN2000/prototypes/spinner.R')
runApp('C:/Users/jasyi/COMP/DESN2000/prototypes/spinner.R')
runApp('prototypes/spinner.R')
runApp('prototypes/spinner.R')
runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
shiny::runApp('ODC')
library(affy)
shiny::runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
library(shiny); runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
runApp('prototypes/validate.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
groups <- rep(1, length(labels$Sex))
groups[labels$Sex == "m"] = 2
print(groups)
shiny::runApp('ODC')
runApp()
runApp()
runApp()
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
names(labels)
levels(labels$Status)
levels(labels$Relationship)
runApp('ODC')
runApp('ODC')
levels(labels$Sex)
runApp('ODC')
runApp('ODC')
levels(labels$Relationship)
runApp('ODC')
runApp('ODC')
?updateSelectInput
runApp('ODC')
runApp('ODC')
names(labels)
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
print(labels$Sex)
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
labels[1]
runApp('ODC')
runApp()
runApp()
runApp('ODC')
runApp()
runApp('ODC')
?renderDataTable
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
groups <- as.numeric(labels$Sex)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
print(groups)
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
library(OutDeCo)
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19, bty="n",
ylab="log2 FC", xlab="Average expression (log2 CPM + 1)")
deg <- calc_DE(counts_data, groups, "DESeq2")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
runApp('ODC')
print(deg)
runApp('ODC')
runApp('ODC')
shiny::runApp('ODC')
?selectInput
runApp('ODC')
runApp('ODC')
?navbarPanel
?tabPanel
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
View(counts_data)
rm(counts_data)
counts_data <- read.csv("C:/Users/jasyi/COMP/DESN2000/counts_data.csv", header=FALSE)
View(counts_data)
data(labels)
library(OutDeCo)
groups <- as.numeric(labels$Sex)
deg <- calc_DE(counts_data, groups, "edgeR")
View(counts_data)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
print(groups)
print(counts_data)
rm(counts_data)
counts_data_csv <- read.csv("C:/Users/jasyi/COMP/DESN2000/counts_data_csv.csv", header=FALSE)
View(counts_data_csv)
load(counts_data)
data(counts_data)
force(counts_data)
View(counts_data)
counts_data_txt <- read.csv("C:/Users/jasyi/COMP/DESN2000/counts_data_txt.txt", sep="")
View(counts_data_txt)
runApp('ODC')
?dropdown
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp()
runApp()
runApp()
runApp('ODC')
shiny::runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
?updateRadioButtons
runApp('ODC')
res_sig_lfc_voom <- read.delim("C:/Users/jasyi/Downloads/res_sig_lfc_voom.txt")
View(res_sig_lfc_voom)
res_sig_lfc_voom[1]
a <- res_sig_lfc_voom[1]
View(a)
View(a)
data(counts_data)
data(labels)
library(OutDeCo)
data(counts_data)
data(labels)
groups <- as.numeric(labels$Sex)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" ) + +
geom_point(aes(x=log2FoldChange, y=-log10(padj), colour=threshold)) +
ggtitle("Mov10 overexpression") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" ) + +
geom_point(aes(x=log2FoldChange, y=-log10(padj), colour=threshold)) +
ggtitle("Mov10 overexpression") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust
plotWithHighlights(x,y,status=z,values=c("U","D"),hl.col=c("green","red"))
plotWithHighlights(x,y,status=z,values=c("U","D"),hl.col=c("green","red"))
library(ggplot2)
library(DESeq2)
library(reshape)
library(ggplot2)
library(ggrepel)
library(DEGreport)
library(RColorBrewer)
library(pheatmap)
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" ) +  geom_point(aes(x=log2FoldChange, y=-log10(padj), colour=threshold))
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
if (!requireNamespace('BiocManager', quietly = TRUE))
install.packages('BiocManager')
BiocManager::install('EnhancedVolcano')
library(EnhancedVolcano)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(res,
lab = rownames(deg),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(deg$degs$log2_fc,
lab = rownames(deg),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(-log10(deg$degs$pvals),
lab = rownames(deg),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(deg,
lab = rownames(deg),
x = 'log2FoldChange',
y = 'pvalue')
shiny::runApp('ODC')
shiny::runApp('ODC')
runApp()
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
shiny::runApp('ODC')
library(shiny); runApp('download.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
<<<<<<< HEAD
download_network_hdf5 <- function(network_type = "generic", flag_occr = TRUE, dir = "") {
net_files_keys <- c("b0v6405hz5zlmv8",  "qkoenzheon8nafj",  "299y0pnwewv9ee6", "2np3e78gjnvoe10",  "wsqrji519uyh03k", "tayd6axapwt29ck")
gene_files_keys <- c("8fo67lvq6jemjs4", "bs232ltz50yez7o",  "mi25kj1dtxubzw7",  "s4865kljzg5p8pv", "waqkeem6agg05ve", "fyuq0xkhq4s0ars")
med_files_keys <- c("ucc8uj6p6gc14hu", "gr9ghxp17pe1gaf", "1qwcvvdjr92o22o", "xkioxsl7989ems6", "uykxeie4qgz6dns", "2xoutlukp4cv29x")
i <- 0
if (network_type == "generic" ) { i <-  1 }
if (network_type == "blood" ) { i <- 3 }
if (network_type == "brain" ) { i <- 5 }
if (flag_occr == FALSE) { i <- i + 1 }
if (flag_occr == TRUE ) { network_type <- paste0(network_type, ".occr") }
genes_hdf5  <- paste0(network_type, ".genes.h5")
median_hdf5 <- paste0(network_type, ".med.h5")
net_hdf5    <- paste0(network_type, ".net.h5")
url <- "https://www.dropbox.com/s/"
if( i >  0 ) {
genes_hdf5_dl  <- paste0(url, gene_files_keys[i], "/", genes_hdf5, "?raw=1")
median_hdf5_dl <- paste0(url, med_files_keys[i], "/", median_hdf5, "?raw=1")
net_hdf5_dl    <- paste0(url, net_files_keys[i], "/", net_hdf5, "?raw=1")
if(!file.exists(genes_hdf5)){
tryCatch( download.file(genes_hdf5_dl,   destfile=genes_hdf5, mode = "wb") )
}
if(!file.exists(median_hdf5)){
tryCatch( download.file(median_hdf5_dl,   destfile=median_hdf5, mode = "wb") )
}
if(!file.exists(net_hdf5)){
tryCatch( download.file(net_hdf5_dl,   destfile=net_hdf5, mode = "wb") )
}
}
}
library(OutDeCo)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="./")
remove.packages("OutDeCo")
devtools::install_github("ballouzlab/OutDeCo_lite")
setwd("C:/Users/yvonn/OneDrive - UNSW/Documents/1 Study/2 University/UNSW/Courses/DESN2000/Git/ODC")
library(shiny)
runApp()
runApp()
runApp()
=======
runApp()
runApp()
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
?downloadable_plot
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('download.R')
runApp('ODC')
runApp('download.R')
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
?png
runApp('ODC')
?drive
runApp('ODC')
runApp('ODC')
runApp()
runApp('ODC')
>>>>>>> main
