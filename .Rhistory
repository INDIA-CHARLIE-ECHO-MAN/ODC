<<<<<<< HEAD
download_network_hdf5 <- function(network_type = "generic", flag_occr = TRUE, dir = "") {
net_files_keys <- c("b0v6405hz5zlmv8",  "qkoenzheon8nafj",  "299y0pnwewv9ee6", "2np3e78gjnvoe10",  "wsqrji519uyh03k", "tayd6axapwt29ck")
gene_files_keys <- c("8fo67lvq6jemjs4", "bs232ltz50yez7o",  "mi25kj1dtxubzw7",  "s4865kljzg5p8pv", "waqkeem6agg05ve", "fyuq0xkhq4s0ars")
med_files_keys <- c("ucc8uj6p6gc14hu", "gr9ghxp17pe1gaf", "1qwcvvdjr92o22o", "xkioxsl7989ems6", "uykxeie4qgz6dns", "2xoutlukp4cv29x")
i <- 0
if (network_type == "generic" ) { i <-  1 }
if (network_type == "blood" ) { i <- 3 }
if (network_type == "brain" ) { i <- 5 }
if (flag_occr == FALSE) { i <- i + 1 }
if (flag_occr == TRUE ) { network_type <- paste0(network_type, ".occr") }
genes_hdf5  <- paste0(network_type, ".genes.h5")
median_hdf5 <- paste0(network_type, ".med.h5")
net_hdf5    <- paste0(network_type, ".net.h5")
url <- "https://www.dropbox.com/s/"
if( i >  0 ) {
genes_hdf5_dl  <- paste0(url, gene_files_keys[i], "/", genes_hdf5, "?raw=1")
median_hdf5_dl <- paste0(url, med_files_keys[i], "/", median_hdf5, "?raw=1")
net_hdf5_dl    <- paste0(url, net_files_keys[i], "/", net_hdf5, "?raw=1")
if(!file.exists(genes_hdf5)){
tryCatch( download.file(genes_hdf5_dl,   destfile=genes_hdf5) )
}
if(!file.exists(median_hdf5)){
tryCatch( download.file(median_hdf5_dl,   destfile=median_hdf5) )
}
if(!file.exists(net_hdf5)){
tryCatch( download.file(net_hdf5_dl,   destfile=net_hdf5) )
}
}
}
download_network_hdf5(network_type="generic")
download_network_hdf5(network_type="blood")
download_network_hdf5 <- function(network_type = "generic", flag_occr = TRUE, dir = "") {
net_files_keys <- c("b0v6405hz5zlmv8",  "qkoenzheon8nafj",  "299y0pnwewv9ee6", "2np3e78gjnvoe10",  "wsqrji519uyh03k", "tayd6axapwt29ck")
gene_files_keys <- c("8fo67lvq6jemjs4", "bs232ltz50yez7o",  "mi25kj1dtxubzw7",  "s4865kljzg5p8pv", "waqkeem6agg05ve", "fyuq0xkhq4s0ars")
med_files_keys <- c("ucc8uj6p6gc14hu", "gr9ghxp17pe1gaf", "1qwcvvdjr92o22o", "xkioxsl7989ems6", "uykxeie4qgz6dns", "2xoutlukp4cv29x")
i <- 0
if (network_type == "generic" ) { i <-  1 }
if (network_type == "blood" ) { i <- 3 }
if (network_type == "brain" ) { i <- 5 }
if (flag_occr == FALSE) { i <- i + 1 }
if (flag_occr == TRUE ) { network_type <- paste0(network_type, ".occr") }
genes_hdf5  <- paste0(network_type, ".genes.h5")
median_hdf5 <- paste0(network_type, ".med.h5")
net_hdf5    <- paste0(network_type, ".net.h5")
url <- "https://www.dropbox.com/s/"
if( i >  0 ) {
genes_hdf5_dl  <- paste0(url, gene_files_keys[i], "/", genes_hdf5, "?raw=1")
median_hdf5_dl <- paste0(url, med_files_keys[i], "/", median_hdf5, "?raw=1")
net_hdf5_dl    <- paste0(url, net_files_keys[i], "/", net_hdf5, "?raw=1")
if(!file.exists(genes_hdf5)){
tryCatch( download.file(genes_hdf5_dl,   destfile=genes_hdf5) )
}
if(!file.exists(median_hdf5)){
tryCatch( download.file(median_hdf5_dl,   destfile=median_hdf5) )
}
if(!file.exists(net_hdf5)){
tryCatch( download.file(net_hdf5_dl,   destfile=net_hdf5) )
}
}
}
download_network_hdf5(network_type="generic")
download_network_hdf5(network_type="blood")
download_network_hdf5(network_type="brain")
library(OutDeCo)
man gene_set_enrichment()
man gene_set_enrichment
data(go_slim_entrez)
data(go_voc)
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$up$clusters$genes[clust_net$up$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
groups <- as.numeric(labels$Sex)
groups[labels$Family==1] <- 0
groups[labels$Relationship == "prb"] <- 0
deg <- calc_DE(counts_data, groups, "wilcox")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19, bty="n",
ylab="log2 FC", xlab="Average expression (log2 CPM + 1)")
deg <- calc_DE(counts_data, groups, "DESeq2")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19,  bty="n",
xlab="Average expression (log2 CPM + 1)", ylab="log2 FC" )
deg <- calc_DE(counts_data, groups, "edgeR")
plot( deg$degs$log2_fc, -log10(deg$degs$pvals),
pch=19, bty="n",
xlab="log2 FC", ylab="-log10 p-vals" )
plot( log2(deg$degs$mean_cpm),  deg$degs$log2_fc,
pch=19 , bty="n",
xlab="Average expression (log2 CPM + 1)", ylab="log2 FC")
data(go_slim_entrez)
data(go_voc)
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$up$clusters$genes[clust_net$up$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$down$clusters$genes[clust_net$down$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
filt_min <- 6
clust_size <- plyr::count(clust_net$down$clusters$labels )
clust_keep <-  clust_size[clust_size[,2] < filt_min ,1]
genes_keep <- !is.na(match( clust_net$down$clusters$labels, clust_keep))
plot_coexpression_heatmap(  sub_net$down, clust_net$down, filt=TRUE)
plot_network(1-sub_net$down, clust_net$down , 1 - medK)
# Extract data from the DE analysis
data(sub_nets) # so you do not need to run the DE analysis again
deg_sig <- sub_nets$deg_sig
fc_sig  <- sub_nets$fc_sig
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
# Or if the analysis was from a gene list:
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
data(go_slim_entrez)
data(go_voc)
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$up$clusters$genes[clust_net$up$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$down$clusters$genes[clust_net$down$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = FALSE )
# Extract data from the DE analysis
clust_net[["genes"]]  <- cluster_coexp( sub_net, medK = medK, flag_plot = FALSE )
# Extract data from the DE analysis
data(sub_nets) # so you do not need to run the DE analysis again
deg_sig <- sub_nets$deg_sig
fc_sig  <- sub_nets$fc_sig
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
# Or if the analysis was from a gene list:
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK)
plot_coexpression_heatmap( sub_net$down, clust_net$down)
plot_network(sub_net$down, clust_net$down , medK)
plot_scatter(node_degrees$up[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree" )
plot_scatter(node_degrees$up[,1]/node_degrees$n_genes_total,
node_degrees$up[,2]/node_degrees$n_genes_up,
xlab="Global node degree",
ylab="Local node degree", flag= "density")
filt_min <- 6
clust_size <- plyr::count(clust_net$down$clusters$labels )
clust_keep <-  clust_size[clust_size[,2] < filt_min ,1]
genes_keep <- !is.na(match( clust_net$down$clusters$labels, clust_keep))
plot_coexpression_heatmap(  sub_net$down, clust_net$down, filt=TRUE)
plot_network(1-sub_net$down, clust_net$down , 1 - medK)
data(go_slim_entrez)
data(go_voc)
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$up$clusters$genes[clust_net$up$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
filt <- colSums( go_slim_entrez ) < 5000 & colSums( go_slim_entrez ) >= 10
gene_list <- clust_net$down$clusters$genes[clust_net$down$order]
go_enrich <- gene_set_enrichment(gene_list, go_slim_entrez[filt,], go_voc)
plot_gene_set_enrichment( go_enrich, gene_list, go_slim_entrez[filt,])
OutDeCo_lite/vignette.md at master Â· ballouzlab/OutDeCo_lite
data(sub_nets) # so you do not need to run the DE analysis again
deg_sig <- sub_nets$deg_sig
fc_sig  <- sub_nets$fc_sig
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = FALSE )
# Extract data from the DE analysis
clust_net[["genes"]]  <- cluster_coexp( sub_net, medK = medK, flag_plot = FALSE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = TRUE )
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK)
plot_coexpression_heatmap( sub_net$down, clust_net$down)
plot_network(sub_net$down, clust_net$down , medK)
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK)
plot_coexpression_heatmap( sub_net$down, clust_net$down)
plot_network(sub_net$down, clust_net$down , medK)
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = FALSE )
# Extract data from the DE analysis
clust_net[["genes"]]  <- cluster_coexp( sub_net, medK = medK, flag_plot = FALSE )
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
clust_net[["up"]]  <- cluster_coexp( sub_net$up, medK = medK, flag_plot = TRUE )
# Extract data from the DE analysis
clust_net[["genes"]]  <- cluster_coexp( sub_net, medK = medK, flag_plot = True )
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir="./")
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir=".\")
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir="./")
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir="./")
deg_output <- calc_DE(counts_data, groups, "wilcox")
network_type <- 'generic'
sub_nets <- subset_network_hdf5(deg_output$degs, network_type, dir="./")
./
quit
print "./"
library(OutDeCo)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="./")
library(rhdf5)
\
library(rhdf5)
\
library(rhdf5)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="./")
library(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
R -e "shiny::runApp('~/ui.R')"
R -e "shiny::runApp('~/ui')"
R -e "shiny::runApp(ui)"
R -e "shiny::runApp(server)"
R -e "shiny::runApp('~/server')"
R -e "shiny::runApp('~/ui')"
runApp('ODC')
library(shiny)
runApp('ODC')
runApp('ODC')
download_network_hdf5 <- function(network_type = "generic", flag_occr = TRUE, dir = "") {
net_files_keys <- c("b0v6405hz5zlmv8",  "qkoenzheon8nafj",  "299y0pnwewv9ee6", "2np3e78gjnvoe10",  "wsqrji519uyh03k", "tayd6axapwt29ck")
gene_files_keys <- c("8fo67lvq6jemjs4", "bs232ltz50yez7o",  "mi25kj1dtxubzw7",  "s4865kljzg5p8pv", "waqkeem6agg05ve", "fyuq0xkhq4s0ars")
med_files_keys <- c("ucc8uj6p6gc14hu", "gr9ghxp17pe1gaf", "1qwcvvdjr92o22o", "xkioxsl7989ems6", "uykxeie4qgz6dns", "2xoutlukp4cv29x")
i <- 0
if (network_type == "generic" ) { i <-  1 }
if (network_type == "blood" ) { i <- 3 }
if (network_type == "brain" ) { i <- 5 }
if (flag_occr == FALSE) { i <- i + 1 }
if (flag_occr == TRUE ) { network_type <- paste0(network_type, ".occr") }
genes_hdf5  <- paste0(network_type, ".genes.h5")
median_hdf5 <- paste0(network_type, ".med.h5")
net_hdf5    <- paste0(network_type, ".net.h5")
url <- "https://www.dropbox.com/s/"
if( i >  0 ) {
genes_hdf5_dl  <- paste0(url, gene_files_keys[i], "/", genes_hdf5, "?raw=1")
median_hdf5_dl <- paste0(url, med_files_keys[i], "/", median_hdf5, "?raw=1")
net_hdf5_dl    <- paste0(url, net_files_keys[i], "/", net_hdf5, "?raw=1")
if(!file.exists(genes_hdf5)){
tryCatch( download.file(genes_hdf5_dl,   destfile=genes_hdf5, mode = "wb") )
}
if(!file.exists(median_hdf5)){
tryCatch( download.file(median_hdf5_dl,   destfile=median_hdf5, mode = "wb") )
}
if(!file.exists(net_hdf5)){
tryCatch( download.file(net_hdf5_dl,   destfile=net_hdf5, mode = "wb") )
}
}
}
library(OutDeCo)
gene_list <- sample(  EGAD::attr.human$name[EGAD::attr.human$chr=="chrX"], 100 )
network_type <- 'generic'
sub_nets <- subset_network_hdf5_gene_list(gene_list, network_type, dir="./")
remove.packages("OutDeCo")
devtools::install_github("ballouzlab/OutDeCo_lite")
library(shiny)
library(OutDeCo)
setwd("C:/Users/yvonn/OneDrive - UNSW/Documents/1 Study/2 University/UNSW/Courses/DESN2000/Git/ODC")
runApp()
=======
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
server <- function(input, output, session) {
selectedData2 <- reactive({
iris[, c(input$xcol2, input$ycol2)]
})
clusters2 <- reactive({
kmeans(selectedData2(), input$clusters2)
})
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
}
ui <- fluidPage(
tags$h2("pickerInput in dropdown"),
br(),
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol2',
label = 'X Variable',
choices = names(iris),
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol2',
label = 'Y Variable',
choices = names(iris),
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
server <- function(input, output, session) {
selectedData2 <- reactive({
iris[, c(input$xcol2, input$ycol2)]
})
clusters2 <- reactive({
kmeans(selectedData2(), input$clusters2)
})
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
}
runApp('C:/Users/jasyi/Downloads/file.R')
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
server <- function(input, output, session) {
selectedData2 <- reactive({
iris[, c(input$xcol2, input$ycol2)]
})
clusters2 <- reactive({
kmeans(selectedData2(), input$clusters2)
})
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
}
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
ui <- fluidPage(
tags$h2("pickerInput in dropdown"),
br(),
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol2',
label = 'X Variable',
choices = names(iris),
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol2',
label = 'Y Variable',
choices = names(iris),
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
ui <- fluidPage(
tags$h2("pickerInput in dropdown"),
br(),
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol2',
label = 'X Variable',
choices = names(iris),
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol2',
label = 'Y Variable',
choices = names(iris),
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
library(shiny); runApp('C:/Users/jasyi/Downloads/dropdown.R')
# A demonstration of clicking, hovering, and brushing
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
plotOutput("plot", height=300,
click = "plot_click",  # Equiv, to click=clickOpts(id="plot_click")
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")
),
h4("Clicked points"),
tableOutput("plot_clickedpoints"),
h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
# A basic shiny app with a plotOutput
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("newplot", "New plot")
),
mainPanel(
plotOutput("plot")
)
)
),
server = function(input, output) {
output$plot <- renderPlot({
input$newplot
# Add a little noise to the cars data
cars2 <- cars + rnorm(nrow(cars))
plot(cars2)
})
}
)
library(shiny); runApp('plot.R')
runApp('sidebar.R')
ui <- fluidPage(
tags$h2("pickerInput in dropdown"),
br(),
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol2',
label = 'X Variable',
choices = names(iris),
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol2',
label = 'Y Variable',
choices = names(iris),
selected = names(iris)[[2]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters2',
label = 'Cluster count',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("cog"),
status = "danger", width = "300px",
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
),
plotOutput(outputId = 'plot2')
)
runApp('C:/Users/jasyi/Downloads/dropdown.R')
?sliderInput
library(shiny); runApp('shinytemplate.R')
runApp('Tutorial.R')
runApp('sidebar.R')
runApp('ODC')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("obs", "Number of observations:", min = 10, max = 500, value = 100)
),
mainPanel(plotOutput("distPlot"))
)
)
runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/Downloads/dropdown.R')
runApp('ODC')
runApp()
runApp()
runApp('ODC')
?br
runApp('ODC')
?dropdown
runApp('ODC')
runApp('ODC')
library(shiny); runApp('plot.R')
runApp('plot.R')
?plot
runApp('plot.R')
library(OutDeCo)
data(counts_data)
data(labels)
# Or if the analysis was from a gene list:
sub_net <- sub_nets$sub_net
node_degrees <-  sub_nets$node_degrees
medK <-  as.numeric(sub_nets$median)
clust_net <- list()
# Extract data from the DE analysis
clust_net[["down"]]  <- cluster_coexp( sub_net$down, medK = medK, flag_plot = TRUE )
runApp('plot.R')
runApp('plot.R')
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('plot.R')
?plotOutput
runApp('ODC')
runApp('ODC')
runApp('ODC')
?themeSelector
runApp('design.R')
runApp('design.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?materialSwitch
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?navBarPage
?navbarPage
runApp('ODC')
shinyApp(
shinyUI(
navbarPage("This is some awesome testing!!!",
tabPanel("Plot"),
tabPanel("Summary" ),
navbarMenu("More",
tabPanel("Table"),
tabPanel("About")
),
tags$head(tags$style('
nav .container:first-child {
margin-left:10px; width: 100%;
}'))
)),
shinyServer(function(input, output) {})
shinyApp(
shinyUI(
navbarPage("This is some awesome testing!!!",
tabPanel("Plot"),
tabPanel("Summary" ),
navbarMenu("More",
tabPanel("Table"),
tabPanel("About")
),
tags$head(tags$style('
nav .container:first-child {
margin-left:10px; width: 100%;
}'))
)),
shinyServer(function(input, output) {})
shinyApp(
shinyUI(
navbarPage("This is some awesome testing!!!",
tabPanel("Plot"),
tabPanel("Summary" ),
navbarMenu("More",
tabPanel("Table"),
tabPanel("About")
),
tags$head(tags$style('
nav .container:first-child {
margin-left:10px; width: 100%;
}'))
)),
shinyServer(function(input, output) {})
shinyApp(
shinyUI(
navbarPage("This is some awesome testing!!!",
tabPanel("Plot"),
tabPanel("Summary" ),
navbarMenu("More",
tabPanel("Table"),
tabPanel("About")
),
tags$head(tags$style('
nav .container:first-child {
margin-left:10px; width: 100%;
}'))
)),
shinyServer(function(input, output) {})
runApp('shinytemplate.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
library(shiny); runApp('dataStorage.R')
runApp('dataStorage.R')
?textInput
?actionButton
?reactive
?sapply
?wellbar
?wellPanel
?absolutePanel
shiny::runApp('ODC')
shiny::runApp('ODC')
shiny::runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
?sidebarPanel
runApp('ODC')
?navbarMenu
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('checkboxAppearLater.R')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
runApp('ODC')
?eventReactive
runApp('C:/Users/jasyi/COMP/reactive.R')
?updateRadioButtons
runApp('ODC')
runApp('ODC')
runApp()
runApp()
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/COMP/checkboxAppearLater.R')
shiny::runApp('ODC')
runApp()
runApp('ODC')
runApp()
runApp('ODC')
runApp('ODC')
runApp('ODC')
?navlistPanel
runApp('ODC')
runApp('ODC')
runApp('C:/Users/jasyi/Downloads/dropdown.R')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
View(responses)
shiny::runApp('ODC')
runApp('ODC')
?plotOutput
runApp('ODC')
runApp('ODC')
runApp('ODC')
runApp('ODC')
?dropdown
runApp('ODC')
runApp('ODC')
runApp('ODC')
?animateOptions
runApp('ODC')
library(shiny); runApp('plot.R')
runApp('plot.R')
?renderPlot
git status
runApp('plot.R')
?plot_click
?renderText
runApp('plot.R')
?plotOutput
runApp('plot.R')
runApp('plot2.R')
runApp('plot.R')
library(shiny); runApp('plot2.R')
runApp('ODC')
runApp('pickerInput.R')
runApp('ODC')
?sample
runApp('ODC')
?EGAD
shiny::runApp('ODC')
runApp('ODC')
>>>>>>> 4b2e796667642ea5e81159f46dbe636a249ee3a8
